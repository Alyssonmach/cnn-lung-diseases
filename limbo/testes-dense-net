{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.7"
    },
    "colab": {
      "name": "experiment5_dataset4.ipynb",
      "provenance": [],
      "toc_visible": true,
      "machine_shape": "hm",
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Alyssonmach/cnn-lung-diseases/blob/main/limbo/testes-dense-net\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "weekly-aerospace"
      },
      "source": [
        "# Experimento 5 \n",
        "***\n",
        "- Rede utilizada: Inception\n",
        "- Conjunto de Dados: VinBigData\n",
        "- Modelando uma para classificar problemas pulmonares em 11 classes distintas"
      ],
      "id": "weekly-aerospace"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "current-following"
      },
      "source": [
        "### Importação dos pacotes"
      ],
      "id": "current-following"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "meaningful-iraqi"
      },
      "source": [
        "import os\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.utils import class_weight\n",
        "from keras.preprocessing.image import ImageDataGenerator\n",
        "from sklearn.metrics import confusion_matrix, precision_recall_fscore_support, accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers\n",
        "from tensorflow.keras import Model\n",
        "from tensorflow.keras.applications import DenseNet121\n",
        "#from tensorflow.keras.applications.inception_v3 import InceptionV3\n",
        "from tensorflow.keras import optimizers\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint, ReduceLROnPlateau\n",
        "import tensorflow as tf\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "id": "meaningful-iraqi",
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "banned-comfort"
      },
      "source": [
        "### Pré-processamento nos dados"
      ],
      "id": "banned-comfort"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "heated-adult"
      },
      "source": [
        "# lendo os dados de um arquivo csv\n",
        "dataframe = pd.read_csv('/content/drive/MyDrive/vinbigdata/train.csv')\n",
        "# criando uma coluna com os caminhos relativos as imagens\n",
        "dataframe['image_path'] = '/content/drive/MyDrive/vinbigdata/train/' + dataframe.image_id + '.jpg'"
      ],
      "id": "heated-adult",
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "starting-setting",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "30c462b0-cfdb-4237-ca24-56c2350b8171"
      },
      "source": [
        "print('total de imagens disponíveis:', str(len(set(dataframe['image_path']))))"
      ],
      "id": "starting-setting",
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "total de imagens disponíveis: 15000\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tough-newfoundland",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e1de6672-69e4-4820-9705-4d3db94f04f7"
      },
      "source": [
        "# visualizando os casos disponíveis\n",
        "dataframe['class_name'].value_counts()"
      ],
      "id": "tough-newfoundland",
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "No finding            31818\n",
              "Aortic enlargement     7162\n",
              "Cardiomegaly           5427\n",
              "Pleural thickening     4842\n",
              "Pulmonary fibrosis     4655\n",
              "Nodule/Mass            2580\n",
              "Lung Opacity           2483\n",
              "Pleural effusion       2476\n",
              "Other lesion           2203\n",
              "Infiltration           1247\n",
              "ILD                    1000\n",
              "Calcification           960\n",
              "Consolidation           556\n",
              "Atelectasis             279\n",
              "Pneumothorax            226\n",
              "Name: class_name, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "intermediate-anchor"
      },
      "source": [
        "# removendo os casos não relativos a distúrbios pulmonares\n",
        "dataframe = dataframe[dataframe.class_name != 'Aortic enlargement']\n",
        "dataframe = dataframe[dataframe.class_name != 'Cardiomegaly']\n",
        "dataframe = dataframe[dataframe.class_name != 'Other lesion']"
      ],
      "id": "intermediate-anchor",
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "retained-message",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0ba42d23-416c-48f8-aab3-586f3410f57f"
      },
      "source": [
        "# separando os casos rotulados como normais e anormais\n",
        "normal_cases = dataframe[(dataframe.class_id == 14) & (dataframe.class_name == 'No finding')]\n",
        "abnormal_cases = dataframe[(dataframe.class_id != 14) & (dataframe.class_name != 'No finding')]\n",
        "\n",
        "print('total de dados após a filtração:', str(len(set(normal_cases['image_path'])) + len(set(abnormal_cases['image_path']))))"
      ],
      "id": "retained-message",
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "total de dados após a filtração: 13952\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "forty-system"
      },
      "source": [
        "# removendo as imagens repetidas\n",
        "normal_data = normal_cases[['image_path', 'class_name']].drop_duplicates(subset = 'image_path', )\n",
        "abnormal_data = abnormal_cases[['image_path', 'class_name']].drop_duplicates(subset = 'image_path', )\n",
        "\n",
        "# criando dataframes especifos com caminhos para as imagens e rótulos\n",
        "normal_data['target'] = 'normal'\n",
        "abnormal_data['target'] = 'abnormal'"
      ],
      "id": "forty-system",
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "viral-conspiracy",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "94daf8e3-d5e6-437a-8c72-769993990893"
      },
      "source": [
        "print('quantidade de dados rotulados como normais:', len(normal_data))\n",
        "print('quantidade de dados rotulados como anormais:', len(abnormal_data))"
      ],
      "id": "viral-conspiracy",
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "quantidade de dados rotulados como normais: 10606\n",
            "quantidade de dados rotulados como anormais: 3346\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "baking-shield"
      },
      "source": [
        "# removendo 69% dos casos normais para balancear os dados\n",
        "normal, _ = train_test_split(normal_data, test_size = 0.69, random_state = 42)"
      ],
      "id": "baking-shield",
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "little-communications",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3d2d301a-2ab3-47a5-8373-d6912972d48b"
      },
      "source": [
        "print('quantidade de dados rotulados como normais:', len(normal))\n",
        "print('quantidade de dados rotulados como anormais:', len(abnormal_data))"
      ],
      "id": "little-communications",
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "quantidade de dados rotulados como normais: 3287\n",
            "quantidade de dados rotulados como anormais: 3346\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "flying-supervision"
      },
      "source": [
        "# concatenando os dataframes de casos normais e anormais\n",
        "full_data = abnormal_data"
      ],
      "id": "flying-supervision",
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QRS6Rb4Oj-t6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d15c7835-f277-4e16-8ff3-f6e939644101"
      },
      "source": [
        "# visualizando a quantidade de exemplos por classe disponíveis\n",
        "full_data['class_name'].value_counts()"
      ],
      "id": "QRS6Rb4Oj-t6",
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Pleural thickening    901\n",
              "Pulmonary fibrosis    742\n",
              "Lung Opacity          427\n",
              "Nodule/Mass           339\n",
              "Pleural effusion      328\n",
              "Calcification         167\n",
              "Infiltration          163\n",
              "ILD                   152\n",
              "Consolidation          59\n",
              "Atelectasis            41\n",
              "Pneumothorax           27\n",
              "Name: class_name, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GKZYDuypT5-W"
      },
      "source": [
        "# importando os dataframes dos dados de treinamento, validação e teste\n",
        "train_df = pd.read_csv('/content/drive/MyDrive/train_df.csv', sep = ',', index_col=  0)\n",
        "validation_df = pd.read_csv('/content/drive/MyDrive/validation_df.csv', sep = ',', index_col=  0)\n",
        "test_df = pd.read_csv('/content/drive/MyDrive/test_df.csv' , sep = ',', index_col=  0)"
      ],
      "id": "GKZYDuypT5-W",
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4n3QarWhUUr9"
      },
      "source": [
        "# tornando as classes na coluna 'labels' categórica\n",
        "train_df.loc[train_df.labels == 1, 'labels'] = 'abnormal'\n",
        "train_df.loc[train_df.labels == 0, 'labels'] = 'normal'\n",
        "\n",
        "validation_df.loc[validation_df.labels == 1, 'labels'] = 'abnormal'\n",
        "validation_df.loc[validation_df.labels == 0, 'labels'] = 'normal'\n",
        "\n",
        "test_df.loc[test_df.labels == 1, 'labels'] = 'abnormal'\n",
        "test_df.loc[test_df.labels == 0, 'labels'] = 'normal'"
      ],
      "id": "4n3QarWhUUr9",
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BxIV_-VxUXdo"
      },
      "source": [
        "# separando os casos de anormalidade no dataset nih\n",
        "train_abnormal_cases = train_df[train_df.labels == 'abnormal']\n",
        "validation_abnormal_cases = validation_df[validation_df.labels == 'abnormal']\n",
        "test_abnormal_cases = test_df[test_df.labels == 'abnormal']"
      ],
      "id": "BxIV_-VxUXdo",
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1pSQO3nvUk_O"
      },
      "source": [
        "# concatenando os dados do dataset nih\n",
        "nih_data = pd.concat([train_abnormal_cases, validation_abnormal_cases,\n",
        "                      test_abnormal_cases])"
      ],
      "id": "1pSQO3nvUk_O",
      "execution_count": 49,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rUVi7bt1V6wO"
      },
      "source": [
        "# organizando o nome das colunas\n",
        "nih_data.rename(columns= {'Image Index': 'image_path', 'finding_labels': 'class_name',\n",
        "                          'labels': 'target'}, inplace = True)"
      ],
      "id": "rUVi7bt1V6wO",
      "execution_count": 50,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "svw6fI2JW0ye"
      },
      "source": [
        "# concatenando os dados do vinbigdata e do nih\n",
        "full_data = pd.concat([full_data, nih_data])"
      ],
      "id": "svw6fI2JW0ye",
      "execution_count": 51,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cCLoX1KPXXm1"
      },
      "source": [
        "# removendo classes ineficientes para o aprendizado da rede \n",
        "full_data = full_data[(full_data.class_name != 'ILD') & (full_data.class_name != 'Calcification')]\n",
        "full_data = full_data[(full_data.class_name != 'Pneumonia') & (full_data.class_name != 'Pleural effusion')]\n",
        "full_data = full_data[(full_data.class_name != 'Nodule/Mass') & (full_data.class_name != 'Lung Opacity')]\n",
        "full_data = full_data[full_data.class_name != 'Pleural_Thickening']"
      ],
      "id": "cCLoX1KPXXm1",
      "execution_count": 52,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fnld5AI6Ya4d"
      },
      "source": [
        "# separando os dados de cada uma das classes\n",
        "infiltration = full_data[full_data.class_name == 'Infiltration']\n",
        "atelectasis = full_data[full_data.class_name == 'Atelectasis']\n",
        "nodule = full_data[full_data.class_name == 'Nodule']\n",
        "pneumothorax = full_data[full_data.class_name == 'Pneumothorax']\n",
        "consolidation = full_data[full_data.class_name == 'Consolidation']\n",
        "rest_abnormal_data = full_data[(full_data.class_name == 'Pleural thickening') |\n",
        "                               (full_data.class_name == 'Emphysema') |\n",
        "                               (full_data.class_name == 'Pulmonary fibrosis') |\n",
        "                               (full_data.class_name == 'Fibrosis') |\n",
        "                               (full_data.class_name == 'Edema')]"
      ],
      "id": "fnld5AI6Ya4d",
      "execution_count": 53,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_xYjJi_AanzW"
      },
      "source": [
        "# organizando a quantidade de dados disponíveis em cada uma das classes\n",
        "infiltration, _ = train_test_split(infiltration, test_size = 0.9, random_state = 42)\n",
        "atelectasis, _ = train_test_split(atelectasis, test_size = 0.77, random_state = 42)\n",
        "nodule, _ = train_test_split(nodule, test_size = 0.64, random_state = 42)\n",
        "pneumothorax, _ = train_test_split(pneumothorax, test_size = 0.56, random_state = 42)\n",
        "consolidation, _ = train_test_split(consolidation, test_size = 0.28, random_state = 42)\n",
        "full_data = pd.concat([infiltration, atelectasis, nodule, pneumothorax, consolidation, rest_abnormal_data])"
      ],
      "id": "_xYjJi_AanzW",
      "execution_count": 54,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ejs7xDFAcNGs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10757adf-f469-4034-db3a-1ce8366fa446"
      },
      "source": [
        "# visualizando o resultado final da quantidade de exemplos disponíveis em cada classe\n",
        "full_data['class_name'].value_counts()"
      ],
      "id": "Ejs7xDFAcNGs",
      "execution_count": 55,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Consolidation         985\n",
              "Atelectasis           978\n",
              "Pneumothorax          977\n",
              "Nodule                973\n",
              "Infiltration          971\n",
              "Pleural thickening    901\n",
              "Emphysema             892\n",
              "Pulmonary fibrosis    742\n",
              "Fibrosis              727\n",
              "Edema                 628\n",
              "Name: class_name, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 55
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "worst-management"
      },
      "source": [
        "# separando os dados de treinamento e de teste\n",
        "train_df, test_df = train_test_split(full_data, stratify = full_data['target'],\n",
        "                                     test_size = 0.15, random_state = 42)"
      ],
      "id": "worst-management",
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "future-weather"
      },
      "source": [
        "# separando os dados de validação dos dados de treinamento\n",
        "train_df, validation_df = train_test_split(train_df, stratify = train_df['target'],\n",
        "                                           test_size = 0.25, random_state = 42)"
      ],
      "id": "future-weather",
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "secret-session",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab37de17-70a9-48b4-9c41-58c3fb084359"
      },
      "source": [
        "# visualizando a quantidade de dados\n",
        "print('quantidade de imagens de treinamento:', len(train_df['image_path']))\n",
        "print('quantidade de rótulos de treinamento:', len(train_df['target']))\n",
        "print('quantidade de imagens de teste:', len(test_df['image_path']))\n",
        "print('quantidade de rótulos de teste:', len(test_df['target']))\n",
        "print('quantidade de imagens de validação:', len(validation_df['image_path']))\n",
        "print('quantidade de rótulos de validação:', len(validation_df['target']))"
      ],
      "id": "secret-session",
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "quantidade de imagens de treinamento: 5592\n",
            "quantidade de rótulos de treinamento: 5592\n",
            "quantidade de imagens de teste: 1317\n",
            "quantidade de rótulos de teste: 1317\n",
            "quantidade de imagens de validação: 1865\n",
            "quantidade de rótulos de validação: 1865\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1f8i2GizdDEU"
      },
      "source": [
        "# organizando um dicionário para realizar o balanceamento nos dados das classes\n",
        "class_weights = class_weight.compute_class_weight('balanced', np.unique(train_df['class_name']),\n",
        "                                                  train_df['class_name'])\n",
        "class_weight = {0: class_weights[0], 1: class_weights[1], 2: class_weights[2], 3: class_weights[3],\n",
        "                4: class_weights[4], 5: class_weights[5], 6: class_weights[6], 7: class_weights[7],\n",
        "                8: class_weights[8], 9: class_weights[9]}"
      ],
      "id": "1f8i2GizdDEU",
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bulgarian-staff",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0d0b7727-5c8f-4810-beed-2be8eae41086"
      },
      "source": [
        "# normalizando as imagens de treinamento e aplicando aumento de dados\n",
        "image_generator = ImageDataGenerator(rescale = 1./255.,\n",
        "                                     rotation_range = 10, zoom_range = 0.2)\n",
        "\n",
        "# criando o gerador de imagens de treinamento \n",
        "train_generator = image_generator.flow_from_dataframe(\n",
        "                                                      dataframe = train_df,\n",
        "                                                      directory = '',\n",
        "                                                      x_col = 'image_path',\n",
        "                                                      y_col = 'class_name',\n",
        "                                                      batch_size = 32,\n",
        "                                                      seed = 42,\n",
        "                                                      shuffle = True,\n",
        "                                                      class_mode = 'categorical',\n",
        "                                                      target_size = (224, 224))\n",
        "\n",
        "# normalizando as imagens de teste e validação\n",
        "test_datagen = ImageDataGenerator(rescale = 1./255.)\n",
        "\n",
        "# criando o gerador de imagens de validação \n",
        "valid_generator = test_datagen.flow_from_dataframe(\n",
        "                                                      dataframe = validation_df,\n",
        "                                                      directory = '.', \n",
        "                                                      x_col = 'image_path',\n",
        "                                                      y_col = 'class_name',\n",
        "                                                      batch_size = 32,\n",
        "                                                      seed = 42,\n",
        "                                                      shuffle = True,\n",
        "                                                      class_mode = 'categorical',\n",
        "                                                      target_size = (224, 224))\n",
        "\n",
        "test_generator = test_datagen.flow_from_dataframe(\n",
        "                                                  dataframe = test_df, \n",
        "                                                  directory = '.',\n",
        "                                                  x_col = 'image_path',\n",
        "                                                  y_col = 'class_name',\n",
        "                                                  batch_size = 32,\n",
        "                                                  seed = 42,\n",
        "                                                  shuffle = True,\n",
        "                                                  class_mode = 'categorical',\n",
        "                                                  target_size = (224, 224))"
      ],
      "id": "bulgarian-staff",
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Found 5588 validated image filenames belonging to 10 classes.\n",
            "Found 1865 validated image filenames belonging to 10 classes.\n",
            "Found 1317 validated image filenames belonging to 10 classes.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rolled-luxury"
      },
      "source": [
        "### Preparando a rede neural convolucional"
      ],
      "id": "rolled-luxury"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vEjKBnM-DfVb"
      },
      "source": [
        "# realizando transferência de aprendizado com a mobile net\n",
        "model = DenseNet121(input_shape = (224, 224, 3), include_top = False, weights = 'imagenet')"
      ],
      "id": "vEjKBnM-DfVb",
      "execution_count": 61,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g1V-vMWlE8UM"
      },
      "source": [
        "# obtendo a última camada como sendo a nomeada por 'mixed7'\n",
        "last_layer = model.get_layer('conv5_block16_concat')\n",
        "last_output = last_layer.output\n",
        "x = layers.GlobalAveragePooling2D()(last_output)\n",
        "# adicionando uma camada de saída com um neurônio e uma função de ativação sigmoide\n",
        "x = layers.Dense(units = 10, activation = tf.nn.softmax)(x)      \n",
        "# conecatando as camadas definidas acima com a arquitetura inception\n",
        "model = Model(model.input, x) \n",
        "# compilando a rede \n",
        "model.compile(optimizer = optimizers.RMSprop(learning_rate = 0.0001), loss = 'categorical_crossentropy', \n",
        "              metrics = ['acc'])"
      ],
      "id": "g1V-vMWlE8UM",
      "execution_count": 62,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "engaged-culture"
      },
      "source": [
        "# definindo o caminho pelo qual os pesos serão armazenados \n",
        "filepath = \"transferlearning_weights.hdf5\"\n",
        "# callback para salvar o melhor valor dos pesos em relação ao desempenho com os dados de validação \n",
        "checkpoint = ModelCheckpoint(filepath, monitor = 'val_acc', verbose = 1, save_best_only = True, mode = 'max')\n",
        "# definindo um array de callbacks\n",
        "callbacks = [checkpoint]"
      ],
      "id": "engaged-culture",
      "execution_count": 63,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mighty-manufacturer",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "21da16ee-98de-4c19-e772-f1aba4fc50ee"
      },
      "source": [
        "# treinando a rede neural convolucional\n",
        "history = model.fit_generator(train_generator, steps_per_epoch = 5587 // 32, \n",
        "                              validation_data = valid_generator, validation_steps = 1865 // 32,\n",
        "                              callbacks = callbacks, epochs = 150, class_weight = class_weight,\n",
        "                              use_multiprocessing = True, workers = 4)"
      ],
      "id": "mighty-manufacturer",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 2.0231 - acc: 0.2028WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 1652s 9s/step - loss: 2.0222 - acc: 0.2030 - val_loss: 2.5489 - val_acc: 0.1126\n",
            "\n",
            "Epoch 00001: val_acc improved from -inf to 0.11261, saving model to transferlearning_weights.hdf5\n",
            "Epoch 2/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.6375 - acc: 0.3218WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 106s 597ms/step - loss: 1.6374 - acc: 0.3219 - val_loss: 1.6665 - val_acc: 0.3432\n",
            "\n",
            "Epoch 00002: val_acc improved from 0.11261 to 0.34321, saving model to transferlearning_weights.hdf5\n",
            "Epoch 3/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.5147 - acc: 0.4034WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 106s 599ms/step - loss: 1.5146 - acc: 0.4034 - val_loss: 1.6146 - val_acc: 0.3728\n",
            "\n",
            "Epoch 00003: val_acc improved from 0.34321 to 0.37284, saving model to transferlearning_weights.hdf5\n",
            "Epoch 4/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.4036 - acc: 0.4347WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 106s 601ms/step - loss: 1.4036 - acc: 0.4347 - val_loss: 1.6140 - val_acc: 0.3944\n",
            "\n",
            "Epoch 00004: val_acc improved from 0.37284 to 0.39440, saving model to transferlearning_weights.hdf5\n",
            "Epoch 5/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.3192 - acc: 0.4560WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 109s 619ms/step - loss: 1.3192 - acc: 0.4561 - val_loss: 1.6178 - val_acc: 0.3675\n",
            "\n",
            "Epoch 00005: val_acc did not improve from 0.39440\n",
            "Epoch 6/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.2409 - acc: 0.4991WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 611ms/step - loss: 1.2409 - acc: 0.4991 - val_loss: 2.3374 - val_acc: 0.2662\n",
            "\n",
            "Epoch 00006: val_acc did not improve from 0.39440\n",
            "Epoch 7/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.1536 - acc: 0.5457WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 610ms/step - loss: 1.1537 - acc: 0.5457 - val_loss: 1.8904 - val_acc: 0.3572\n",
            "\n",
            "Epoch 00007: val_acc did not improve from 0.39440\n",
            "Epoch 8/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 1.0738 - acc: 0.5773WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 109s 617ms/step - loss: 1.0739 - acc: 0.5773 - val_loss: 1.6432 - val_acc: 0.4133\n",
            "\n",
            "Epoch 00008: val_acc improved from 0.39440 to 0.41325, saving model to transferlearning_weights.hdf5\n",
            "Epoch 9/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.9621 - acc: 0.6330WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 611ms/step - loss: 0.9623 - acc: 0.6330 - val_loss: 1.8228 - val_acc: 0.3578\n",
            "\n",
            "Epoch 00009: val_acc did not improve from 0.41325\n",
            "Epoch 10/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.8627 - acc: 0.6601WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 610ms/step - loss: 0.8629 - acc: 0.6600 - val_loss: 1.8888 - val_acc: 0.3842\n",
            "\n",
            "Epoch 00010: val_acc did not improve from 0.41325\n",
            "Epoch 11/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.8097 - acc: 0.7023WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 608ms/step - loss: 0.8099 - acc: 0.7022 - val_loss: 2.0262 - val_acc: 0.3858\n",
            "\n",
            "Epoch 00011: val_acc did not improve from 0.41325\n",
            "Epoch 12/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.7280 - acc: 0.7296WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 107s 606ms/step - loss: 0.7282 - acc: 0.7295 - val_loss: 2.5424 - val_acc: 0.3017\n",
            "\n",
            "Epoch 00012: val_acc did not improve from 0.41325\n",
            "Epoch 13/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.6682 - acc: 0.7479WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 107s 603ms/step - loss: 0.6683 - acc: 0.7479 - val_loss: 2.1199 - val_acc: 0.3755\n",
            "\n",
            "Epoch 00013: val_acc did not improve from 0.41325\n",
            "Epoch 14/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.5835 - acc: 0.7896WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 107s 605ms/step - loss: 0.5837 - acc: 0.7894 - val_loss: 2.1857 - val_acc: 0.3631\n",
            "\n",
            "Epoch 00014: val_acc did not improve from 0.41325\n",
            "Epoch 15/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.5371 - acc: 0.7977WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 610ms/step - loss: 0.5372 - acc: 0.7977 - val_loss: 2.3404 - val_acc: 0.3249\n",
            "\n",
            "Epoch 00015: val_acc did not improve from 0.41325\n",
            "Epoch 16/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.5084 - acc: 0.8142WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 107s 606ms/step - loss: 0.5084 - acc: 0.8142 - val_loss: 2.4583 - val_acc: 0.3831\n",
            "\n",
            "Epoch 00016: val_acc did not improve from 0.41325\n",
            "Epoch 17/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - ETA: 0s - loss: 0.4335 - acc: 0.8299WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "174/174 [==============================] - 108s 607ms/step - loss: 0.4336 - acc: 0.8299 - val_loss: 2.6288 - val_acc: 0.3508\n",
            "\n",
            "Epoch 00017: val_acc did not improve from 0.41325\n",
            "Epoch 18/150\n",
            "WARNING:tensorflow:multiprocessing can interact badly with TensorFlow, causing nondeterministic deadlocks. For high performance data pipelines tf.data is recommended.\n",
            "173/174 [============================>.] - ETA: 0s - loss: 0.3884 - acc: 0.8592"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "concrete-house"
      },
      "source": [
        "### Salvando o modelo"
      ],
      "id": "concrete-house"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "distant-harassment"
      },
      "source": [
        "# carregando o melhor peso obtido para o modelo\n",
        "best_model = model\n",
        "best_model.load_weights('/content/transferlearning_weights.hdf5')"
      ],
      "id": "distant-harassment",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "humanitarian-ultimate"
      },
      "source": [
        "# salvando os dois modelos obtidos durante o treinamento\n",
        "model.save('model1')\n",
        "best_model.save('model2')"
      ],
      "id": "humanitarian-ultimate",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T--QqT_wP9D9"
      },
      "source": [
        "!mv /content/model1 /content/drive/MyDrive/experimentos/v2.0-exp5-ds4\n",
        "!mv /content/model2 /content/drive/MyDrive/experimentos/v2.0-exp5-ds4"
      ],
      "id": "T--QqT_wP9D9",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "professional-freight"
      },
      "source": [
        "# carregando o melhor modelo para realização de testes de desempenho\n",
        "#model = tf.keras.models.load_model('/content/drive/MyDrive/experimentos/v2.0-exp3-ds4/model2')"
      ],
      "id": "professional-freight",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "broke-learning"
      },
      "source": [
        "model.evaluate(test_generator)"
      ],
      "id": "broke-learning",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jewish-saturn"
      },
      "source": [
        "### Métricas de avaliação do modelo"
      ],
      "id": "jewish-saturn"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "therapeutic-medium"
      },
      "source": [
        "# carregando os dados de teste\n",
        "for i in range(0, 42):\n",
        "  (x1, y1) = test_generator[i]\n",
        "  if i == 0:\n",
        "    x, y = x1, y1\n",
        "  else:\n",
        "    x = np.concatenate((x, x1))\n",
        "    y = np.concatenate((y, y1))"
      ],
      "id": "therapeutic-medium",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dependent-gnome"
      },
      "source": [
        "# realizando a predição para os dados de teste\n",
        "predict = model.predict(x)"
      ],
      "id": "dependent-gnome",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "precise-kuwait"
      },
      "source": [
        "count_global = 0\n",
        "for predicts in predict:\n",
        "    count = 0\n",
        "    aux = np.zeros((11,))\n",
        "    for values in predicts:\n",
        "        if values >= 0.50:\n",
        "            aux[count] = 1.\n",
        "        else:\n",
        "            aux[count] = 0.\n",
        "        count += 1\n",
        "    predict[count_global] = aux\n",
        "    count_global += 1"
      ],
      "id": "precise-kuwait",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "starting-swaziland"
      },
      "source": [
        "print('Matriz de Confusão:\\n', confusion_matrix(y.argmax(axis = 1), predict.argmax(axis = 1)))\n",
        "print('Acurácia:', accuracy_score(y.argmax(axis = 1), predict.argmax(axis = 1)))\n",
        "print('Precisão', precision_score(y.argmax(axis = 1), predict.argmax(axis = 1)))\n",
        "print('Sensibilidade:', recall_score(y.argmax(axis = 1), predict.argmax(axis = 1))) \n",
        "print('F1_Score:', f1_score(y.argmax(axis = 1), predict.argmax(axis = 1)))"
      ],
      "id": "starting-swaziland",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "nominated-aviation"
      },
      "source": [
        "# visualizando o ganho de acurácia durante o treinamento\n",
        "plt.figure(figsize = (15,5))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(history.history['acc'])\n",
        "plt.plot(history.history['val_acc'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.savefig('model-accuracy')\n",
        "\n",
        "# visualizando o decaimento da função de custo durante o treinamento \n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(history.history['loss'])\n",
        "plt.plot(history.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.savefig('model-loss')"
      ],
      "id": "nominated-aviation",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "upset-sending"
      },
      "source": [
        "### Visualizando a arquitetura da rede"
      ],
      "id": "upset-sending"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "compatible-contract"
      },
      "source": [
        "# visualizando a arquitetura do modelo\n",
        "model.summary()"
      ],
      "id": "compatible-contract",
      "execution_count": null,
      "outputs": []
    }
  ]
}